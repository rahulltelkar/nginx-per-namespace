---
kind: "Deployment"
apiVersion: "apps/v1"
metadata:
  annotations: {}
  name: "nginx-ingress-controller"
  labels:
    app: "nginx-ingress"
    app.kubernetes.io/name: "nginx-ingress-1"
    release: "nginx-ingress"
    heritage: "Tiller"
    chart: "nginx-ingress-1.41.3"
    app.kubernetes.io/component: "deployment.nginx-ingress-controller"
spec:
  minReadySeconds: 0
  replicas: 1
  revisionHistoryLimit: 10
  selector:
    matchLabels:
      app: "nginx-ingress"
      release: "nginx-ingress"
      app.kubernetes.io/component: "deployment.nginx-ingress-controller"
    matchExpressions: []
  strategy: {}
  template:
    metadata:
      annotations: {}
      labels:
        app: "nginx-ingress"
        component: "controller"
        release: "nginx-ingress"
        app.kubernetes.io/component: "deployment.nginx-ingress-controller"
    spec:
      terminationGracePeriodSeconds: 60
      nodeSelector: {}
      serviceAccountName: "nginx-ingress"
      hostNetwork: false
      dnsPolicy: "ClusterFirst"
      containers:
      - name: "nginx-ingress-controller"
        image: "us.gcr.io/k8s-artifacts-prod/ingress-nginx/controller:v0.34.1"
        command: []
        args:
        - "/nginx-ingress-controller"
        - "--default-backend-service=nginx-ingress/nginx-ingress-default-backend"
        - "--election-id=ingress-controller-leader"
        - "--ingress-class=nginx"
        - "--configmap=nginx-ingress/nginx-ingress-controller"
        - "--watch-namespace=nginx-ingress"
        imagePullPolicy: "IfNotPresent"
        ports:
        - name: "http"
          containerPort: 80
          protocol: "TCP"
        - name: "https"
          containerPort: 443
          protocol: "TCP"
        env:
        - name: "POD_NAME"
          valueFrom:
            fieldRef:
              apiVersion: "v1"
              fieldPath: "metadata.name"
        - name: "POD_NAMESPACE"
          valueFrom:
            fieldRef:
              apiVersion: "v1"
              fieldPath: "metadata.namespace"
        livenessProbe:
          initialDelaySeconds: 10
          timeoutSeconds: 1
          periodSeconds: 10
          successThreshold: 1
          failureThreshold: 3
          httpGet:
            path: "/healthz"
            port: 10254
            scheme: "HTTP"
        readinessProbe:
          initialDelaySeconds: 10
          timeoutSeconds: 1
          periodSeconds: 10
          successThreshold: 1
          failureThreshold: 3
          httpGet:
            path: "/healthz"
            port: 10254
            scheme: "HTTP"
        securityContext:
          runAsUser: 101
          allowPrivilegeEscalation: true
          capabilities:
            add:
            - "NET_BIND_SERVICE"
            drop:
            - "ALL"
        resources:
          limits: {}
          requests: {}
